---
name: Continuous Build
on:
  pull_request:
    branches:
      - main
  workflow_call:

jobs:
  Core_Library_Sync:
    name: Library (Sync)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Building Core Library for sync
        run: |
          echo "Building Core Library"
          cargo build --no-default-features --features=sync

  Core_Library_Async:
    name: Library (Async)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Building Library for async
        run: |
          echo "Building Core Library"
          source "$HOME"/.cargo/env
          cargo build --no-default-features --features=async

  ESP32_Example:
    name: ESP32 Example
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - name: Install Rust for Xtensa
        uses: esp-rs/xtensa-toolchain@v1.5
        with:
          default: true
          ldproxy: true
      - name: Building ESP32 Example
        run: |
          echo "Building ESP32 Example"
          cd examples/esp32s3
          source "$HOME"/.cargo/env
          cargo build

  OS_Sync_Example:
    name: OS Sync Example
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Install FTDI Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install libftdi1 libftdi1-dev -y
      - name: Install FTDI Dependencies (MacOS)
        if: runner.os == 'MacOS'
        run: |
          brew install libftdi
      - name: Building OS Sync Example
        run: |
          echo "Building OS Sync Example"
          cd examples
          source "$HOME"/.cargo/env
          cargo build --example os_sync_basic
